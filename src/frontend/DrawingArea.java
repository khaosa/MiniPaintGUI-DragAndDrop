/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package frontend;

import backend.*;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;


/**
 *
 * @author LENOVO
 */
public class DrawingArea extends javax.swing.JPanel implements DrawingEngine, MouseListener, MouseMotionListener, Node {

    private ArrayList<Shape> drawnShapes = new ArrayList<>();
    int R,T,C,L = 0;
    private Node parent;
    private AbstractShapeClass shapeBeingMoved;

    public DrawingArea() {
        initComponents();
        addMouseListener(this);
        addMouseMotionListener(this);
    }

    @Override
    public void addShape(Shape shape) {
        drawnShapes.add(shape);
    }

    @Override
    public void removeShape(Shape shape) {
        for (int i = 0; i < drawnShapes.size(); i++) {
            if (drawnShapes.get(i).equals(shape)) {
                drawnShapes.remove(drawnShapes.get(i));
                break;
            }
        }
    }

    @Override
    public Shape[] getShapes() {
        Shape[] shapeArray = new Shape[drawnShapes.size()];
        return drawnShapes.toArray(shapeArray);
    }

    @Override
    public void refresh(Graphics canvas) {
        this.repaint();
    }

    @Override
    public Node getParentNode() {
        return parent;
    }

    @Override
    public void setParentNode(Node node) {
        this.parent = node;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleDescription("");
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        for (int i = 0; i < drawnShapes.size(); i++) {
            drawnShapes.get(i).draw(g);
        }

    }

    @Override
    public void mouseClicked(MouseEvent e) {
     /*   Point clickedPoint = new Point(e.getX(), e.getY());
        MainFrame parentFrame = (MainFrame) this.getParentNode();
        for (int i = drawnShapes.size()-1; i >=0; i--) {
            if (((AbstractShapeClass) drawnShapes.get(i)).contains(clickedPoint)) {
                parentFrame.getChooseShapeComboBox().setSelectedIndex(i + 1);
                break;
            }
        }*/
    }

    @Override
    public void mousePressed(MouseEvent e) {
        Point clickedPoint = new Point(e.getX(), e.getY());
        MainFrame parentFrame = (MainFrame) this.getParentNode();
        for (int i = drawnShapes.size()-1; i >=0; i--) {
            shapeBeingMoved = (AbstractShapeClass) drawnShapes.get(i);
            if (shapeBeingMoved.contains(clickedPoint)) {
                parentFrame.getChooseShapeComboBox().setSelectedIndex(i + 1);
                shapeBeingMoved.setDraggingpoint(clickedPoint);
                break;
            } else {
                shapeBeingMoved = null; //if shape isnt within clicked coordinates
            }
        }
    }

    @Override
    public void mouseReleased(MouseEvent e) {

    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    @Override
    public void mouseDragged(MouseEvent e) {

        Point releasedPoint = new Point(e.getX(), e.getY());
        if (shapeBeingMoved != null) {
            shapeBeingMoved.moveTo(releasedPoint);
            this.refresh(this.getGraphics());
        }

    }

    @Override
    public void mouseMoved(MouseEvent e) {

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
